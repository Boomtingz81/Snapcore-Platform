// src/pages/SnapAlertSystem.jsx import { useEffect, useState, useRef } from "react"; import { Helmet } from "react-helmet"; import { motion } from "framer-motion"; import { BellAlert, Lock, Settings2 } from "lucide-react";

const ALLOWED_TIERS = ["pro", "garage", "owner"];

export default function SnapAlertSystem() {   const [tier, setTier] = useState(() => localStorage.getItem("user-tier") || "lite");   const [alerts, setAlerts] = useState([]);   const [newAlert, setNewAlert] = useState({ label: "", operator: ">", threshold: "" });   const [liveValues, setLiveValues] = useState({}); // Simulated live values   const audioRef = useRef(null);

  // Simulate live value stream   useEffect(() => {     const interval = setInterval(() => {       const simulated = {         CoolantTemp: Math.floor(Math.random() * 120),         RPM: Math.floor(Math.random() * 7000),         Speed: Math.floor(Math.random() * 150),       };       setLiveValues(simulated);     }, 2000);     return () => clearInterval(interval);   }, []);

  // Alert evaluation logic   useEffect(() => {     alerts.forEach((alert) => {       const value = liveValues[alert.label];       if (value !== undefined) {         const threshold = parseFloat(alert.threshold);         const shouldTrigger =           (alert.operator === ">" && value > threshold) ||           (alert.operator === "<" && value < threshold);         if (shouldTrigger && !alert.triggered) {           triggerAlert(alert.label);           alert.triggered = true;         } else if (!shouldTrigger && alert.triggered) {           alert.triggered = false;         }       }     });     setAlerts([...alerts]);   }, [liveValues]);

  function triggerAlert(label) {     const message = ALERT: ${label} exceeded threshold!;     alert(message);     audioRef.current?.play();   }

  function addAlert() {     if (!newAlert.label || !newAlert.threshold) return;     setAlerts([...alerts, { ...newAlert, triggered: false }]);     setNewAlert({ label: "", operator: ">", threshold: "" });   }

  if (!ALLOWED_TIERS.includes(tier)) {     return (       <main className="min-h-screen flex items-center justify-center bg-white dark:bg-gray-950 text-gray-800 dark:text-white">         <div className="text-center">           <Lock className="mx-auto mb-4 h-10 w-10 text-red-500" />           <h1 className="text-2xl font-bold">Access Denied</h1>           <p className="mt-2">SnapAlertSystem is only available to Pro, Garage, and Owner tiers.</p>         </div>       </main>     );   }

  return (     <>       <Helmet>         <title>SnapAlert System – Live Alerts</title>         <meta name="description" content="Set alerts for live diagnostic thresholds in SnapCore." />       </Helmet>

      <main className="min-h-screen px-6 py-12 bg-white dark:bg-gray-950 text-gray-800 dark:text-white">         <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.3 }} className="max-w-4xl mx-auto">           <h1 className="text-3xl font-bold flex items-center gap-2 mb-6">             <BellAlert className="text-red-500" /> SnapAlert System           </h1>

          {/* Live Values Panel */}           <div className="grid grid-cols-2 sm:grid-cols-3 gap-4 mb-6">             {Object.entries(liveValues).map(([key, val]) => (               <div key={key} className="bg-gray-100 dark:bg-gray-800 p-4 rounded-xl text-center">                 <p className="text-sm text-gray-500">{key}</p>                 <p className="text-lg font-semibold">{val}</p>               </div>             ))}           </div>

          {/* Add Alert Form */}           <div className="bg-gray-50 dark:bg-gray-900 p-4 rounded-xl mb-6">             <h2 className="text-lg font-semibold mb-2 flex items-center gap-2">               <Settings2 className="text-blue-500" /> Set Alert Condition             </h2>             <div className="flex flex-wrap gap-3">               <input                 type="text"                 placeholder="Label (e.g. CoolantTemp)"                 value={newAlert.label}                 onChange={(e) => setNewAlert({ ...newAlert, label: e.target.value })}                 className="px-3 py-2 border rounded w-1/3"               />               <select                 value={newAlert.operator}                 onChange={(e) => setNewAlert({ ...newAlert, operator: e.target.value })}                 className="px-3 py-2 border rounded"               >                 <option value=">">Greater Than</option>                 <option value="<">Less Than</option>               </select>               <input                 type="number"                 placeholder="Threshold"                 value={newAlert.threshold}                 onChange={(e) => setNewAlert({ ...newAlert, threshold: e.target.value })}                 className="px-3 py-2 border rounded w-1/4"               />               <button onClick={addAlert} className="px-4 py-2 bg-blue-600 text-white rounded">Add Alert</button>             </div>           </div>

          {/* Active Alerts */}           <div>             <h2 className="text-lg font-semibold mb-3">Active Alerts</h2>             <ul className="list-disc pl-6 space-y-1">               {alerts.map((a, i) => (                 <li key={i} className={a.triggered ? "text-red-500 font-bold" : "text-gray-600"}>                   {a.label} {a.operator} {a.threshold} {a.triggered && "⚠️ Triggered"}                 </li>               ))}             </ul>           </div>         </motion.div>         <audio ref={audioRef} src="/alert-sound.mp3" preload="auto" />       </main>     </>   ); }


