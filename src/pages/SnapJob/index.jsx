import { useState } from "react";
import { Helmet } from "react-helmet";
import { motion } from "framer-motion";
import { FileText, Bot, Lock, Download } from "lucide-react";

const ALLOWED_TIERS = ["pro", "garage", "owner"];

export default function SnapJob() {
  const [tier] = useState(() => localStorage.getItem("user-tier") || "lite");
  const [vehicle, setVehicle] = useState("");
  const [issue, setIssue] = useState("");
  const [generatedCard, setGeneratedCard] = useState("");
  const [loading, setLoading] = useState(false);
  const [cardId, setCardId] = useState("");

  const generateJobCardNumber = () => {
    const timestamp = Date.now();
    return `SJ-${timestamp.toString().slice(-6)}`; // Example: SJ-584321
  };

  const handleGenerateJobCard = async () => {
    if (!vehicle.trim() || !issue.trim()) return;

    setLoading(true);
    setGeneratedCard("");
    setCardId("");

    try {
      const jobId = generateJobCardNumber();
      await new Promise((res) => setTimeout(res, 800)); // Simulated response
      const cardText = `
🛠️ JOB CARD – ${jobId}
📅 Date: ${new Date().toLocaleString()}
🚗 Vehicle: ${vehicle.trim()}

⚠️ Issue Reported:
${issue.trim()}

🧠 Recommended Actions:
1. Run full diagnostics.
2. Inspect related sensors/components.
3. Perform corrective repair steps.

📍 Generated by SnapJob AI
      `.trim();
      setCardId(jobId);
      setGeneratedCard(cardText);
    } catch (err) {
      console.error("❌ Failed to generate job card:", err);
    } finally {
      setLoading(false);
    }
  };

  const handleDownload = () => {
    const blob = new Blob([generatedCard], { type: "text/plain;charset=utf-8" });
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = `${cardId || "jobcard"}.txt`;
    link.click();
  };

  if (!ALLOWED_TIERS.includes(tier)) {
    return (
      <main className="min-h-screen flex items-center justify-center bg-white dark:bg-gray-950 text-gray-800 dark:text-white">
        <div className="text-center px-4">
          <Lock className="h-10 w-10 text-red-500 mx-auto mb-4" />
          <h1 className="text-2xl font-bold">Access Denied</h1>
          <p className="mt-2 text-sm">SnapJob is only available to Pro, Garage, and Owner tiers.</p>
        </div>
      </main>
    );
  }

  return (
    <>
      <Helmet>
        <title>SnapJob AI – Job Card Generator</title>
        <meta name="description" content="Generate smart job cards for diagnostics and repairs using AI." />
      </Helmet>

      <main className="min-h-screen px-6 py-16 bg-white dark:bg-gray-950 text-gray-800 dark:text-white">
        <motion.div
          initial={{ opacity: 0, y: 25 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="max-w-3xl mx-auto"
        >
          <div className="flex items-center gap-3 mb-6">
            <FileText className="h-8 w-8 text-violet-600 dark:text-violet-400" />
            <h1 className="text-3xl font-bold">SnapJob AI – Job Card Generator</h1>
          </div>

          <div className="bg-gray-100 dark:bg-gray-800 p-6 rounded-xl shadow space-y-5">
            <input
              type="text"
              className="w-full p-3 rounded border dark:border-gray-700 bg-white dark:bg-gray-900 text-sm"
              placeholder="Vehicle (e.g., BMW 320d 2016)"
              value={vehicle}
              onChange={(e) => setVehicle(e.target.value)}
            />

            <textarea
              rows={4}
              className="w-full p-3 rounded border dark:border-gray-700 bg-white dark:bg-gray-900 text-sm"
              placeholder="Fault description or code (e.g., P0401 – EGR Flow Insufficient)"
              value={issue}
              onChange={(e) => setIssue(e.target.value)}
            />

            <button
              onClick={handleGenerateJobCard}
              disabled={loading || !vehicle.trim() || !issue.trim()}
              className="bg-violet-600 hover:bg-violet-700 text-white text-sm font-semibold px-5 py-2 rounded disabled:opacity-50"
            >
              {loading ? "Generating..." : "Generate Job Card"}
            </button>

            {generatedCard && (
              <div className="bg-white dark:bg-gray-900 mt-4 p-4 border dark:border-gray-700 rounded-lg text-sm whitespace-pre-line">
                <div className="flex items-center gap-2 text-violet-600 font-semibold mb-2">
                  <Bot className="w-4 h-4" /> SnapJob AI Output:
                </div>
                <pre>{generatedCard}</pre>
                <button
                  onClick={handleDownload}
                  className="mt-4 flex items-center gap-2 text-sm bg-gray-800 dark:bg-gray-700 hover:bg-gray-900 text-white px-4 py-2 rounded"
                >
                  <Download className="w-4 h-4" /> Download Job Card
                </button>
              </div>
            )}
          </div>
        </motion.div>
      </main>
    </>
  );
}